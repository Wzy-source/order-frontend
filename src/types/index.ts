
/**
 * Represents the payment mode for an order.
 * Mirrors the enum defined in the Solana contract.
 */
export enum PaymentMode {
    Direct = 0, // Assign explicit values if needed for serialization/comparison
    Advance = 1,
}

/**
 * Represents the possible statuses of an order.
 * Mirrors the enum defined in the Solana contract.
 */
export enum OrderStatus {
    Unpaid = 0,
    Paid = 1,
    Shipped = 2,
    Confirmed = 3,
    Completed = 4,
    Unfulfilled = 5,
}

/**
 * Represents a product listed on the platform.
 * This data is typically stored in the platform's off-chain database.
 */
export interface Product {
    id: string;         // Unique identifier for the product (e.g., UUID generated by backend)
    name: string;       // Name of the product
    priceLamports: string; // Price stored as a string representing the smallest unit (lamports for USDC)
    seller: string;     // Seller's wallet PublicKey as a base58 string
    imageUrl?: string;  // Optional URL for the product image
    // Add any other relevant product details here (description, category, etc.)
}

/**
 * Represents the detailed data structure for an order,
 * typically fetched from the OrderState PDA on the Solana blockchain.
 * Field names should ideally match the fields in the OrderState struct in lib.rs.
 */
export interface OrderData {
    publicKey: string; // Address of the OrderState PDA account
    buyer: string;     // Buyer's wallet PublicKey as a base58 string
    seller: string;    // Seller's wallet PublicKey as a base58 string
    mint: string;      // Mint PublicKey (e.g., USDC) as a base58 string
    tradeId: string;   // Unique trade identifier as a string (converted from BN)
    orderAmount: string;// Original order amount in lamports as a string (converted from BN)
    paidAmount: string; // Amount paid by buyer in lamports as a string (converted from BN)
    claimedAmount: string;// Amount claimed by seller/buyer in lamports as a string (converted from BN)
    paymentMode: PaymentMode; // The payment mode enum
    advancePercentage: number; // Percentage for advance payments (0-100)
    status: unknown;    // The current order status enum
    createdAt: string;   // Timestamp as a string (converted from BN/i64)
    paidAt: string;      // Timestamp as a string
    shippedAt: string;   // Timestamp as a string
    confirmedAt: string; // Timestamp as a string
    completedAt: string; // Timestamp as a string
    // Note: BN and PublicKey types from blockchain fetches are converted to strings/numbers/enums
    // for easier handling in JSON APIs and frontend state.
}

/**
 * Simplified type used when creating a product via the API.
 */
export interface CreateProductPayload {
    name: string;
    priceLamports: string;
    seller: string;
    imageUrl?: string;
}

/**
 * Type used when setting order state via the Admin API.
 */
export interface SetOrderStatePayload {
    status: 'Shipped' | 'Confirmed'; // Explicitly define allowed string values
}

// You can add more shared types here as needed for API requests/responses etc.
